
CIS 520 - Programming Project #1

                   
---- GROUP ----

>> Fill in the names and email addresses of your group members.

<<<<<<< HEAD
Erick Saenz-Gardea <erksters@ksu.edu>
Jason Byrne <jjbyrne@ksu.edu>
Austin Hess <ahess@ksu.edu>

=======
Jason Byrne <jjbyrne@k-state.edu>
Erick Saenz erksters@ksu.edu
FirstName LastName <email@k-state.edu>
>>>>>>> ec62655d1a3635e4e8b1777ad35abe92ce375189
...

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for
>> the TA, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation,
>> course text, lecture notes, and course staff.

<<<<<<< HEAD
Inspiration came from this repository: https://github.com/kinux98/pintos-project-1
=======
https://github.com/kinux98/pintos-project-1

>>>>>>> ec62655d1a3635e4e8b1777ad35abe92ce375189
https://jeason.gitbooks.io/pintos-reference-guide-sysu/content/Debugging-tools-guide.html
                 ALARM CLOCK
                 ===========

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

struct sleeping_thread - A struct defined so that the sleep_list could be populated and so that we can define a thread that is sleeping. It also provides the sleeping threads with a timer of how long it is asleep.
static struct list sleep_list - A list that is used to define which threads are blocked.

---- ALGORITHMS ----

>> A2: Briefly describe what happens in a call to your timer_sleep(),
>> including the effects of the timer interrupt handler.

It starts by allocating the pages that contain zeros to the sleeping thread and then asserting that it's not null. It then gets the timer ticks needed to sleep the thread. From there it creates another struct thread for the current thread and checks to make sure that the current thread's interrupt level is currently on. Then it calculates the timer ticks neeeded and adds the thread to the list in order (so that you only need to check the head of the list instead of iterating through it all every time). Finally it blocks the created thread so that it does not fire off while other threads are currently running.

>> A3: What steps are taken to minimize the amount of time spent in
>> the timer interrupt handler?

It minimizes the amount of time spent in the timer interrupt handler becauase it only checks the head, or the first element, of the list every time and if it does not match the condition of the current ticks being the same as the sleeping ticks, it breaks the loop and continues. The only case where you would be making more than one check in the list would be if a thread was just removed from the list. This is an improvement because we are not wasting time looping through the entire list.

---- SYNCHRONIZATION ----

>> A4: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?

Race conditions are avoided because we set the interrupt level to off, which means the process becomes atomic. Therefore, handling the problem since the operations would be handled separatley.

>> A5: How are race conditions avoided when a timer interrupt occurs
>> during a call to timer_sleep()?

While the timer_sleep function is processing the interrupt levels are set to disabled in order to prevent them from being interrupted while running.

---- RATIONALE ----

>> A6: Why did you choose this design?  In what ways is it superior to
>> other designs that you considered?

We chose this design because it improved the overall running time of the process. Other designs that were considered had the program iterating through the entire list of threads every single time timer_interrupt was called, which in the long run would bog the system down. This design makes it so every call to timer_interrupt only checks the head of the list, or the element with the shortest wake up time, and then breaks out.


             PRIORITY SCHEDULING
             ===================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

#define NICE_MIN - 
#define NICE_DEFAULT - 
#define NICE_MAX - 
int nice - 
int recent_cpu -
int load_avg - 

>> B2: Explain the data structure used to track priority donation.


---- ALGORITHMS ----

>> B3: How do you ensure that the highest priority thread waiting for
>> a lock, semaphore, or condition variable wakes up first?

>> B4: Describe the sequence of events when a call to lock_acquire()
>> causes a priority donation.  How is nested donation handled?

>> B5: Describe the sequence of events when lock_release() is called
>> on a lock that a higher-priority thread is waiting for.

---- SYNCHRONIZATION ----

>> B6: Describe a potential race in thread_set_priority() and explain
>> how your implementation avoids it.  Can you use a lock to avoid
>> this race?

---- RATIONALE ----

>> B7: Why did you choose this design?  In what ways is it superior to
>> another design you considered?


              ADVANCED SCHEDULER [EXTRA CREDIT]
              =================================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> C2: Suppose threads A, B, and C have nice values 0, 1, and 2.  Each
>> has a recent_cpu value of 0.  Fill in the table below showing the
>> scheduling decision and the priority and recent_cpu values for each
>> thread after each given number of timer ticks:

timer  recent_cpu    priority   thread
ticks   A   B   C   A   B   C   to run
-----  --  --  --  --  --  --   ------
 0
 4
 8
12
16
20
24
28
32
36

>> C3: Did any ambiguities in the scheduler specification make values
>> in the table uncertain?  If so, what rule did you use to resolve
>> them?  Does this match the behavior of your scheduler?

>> C4: How is the way you divided the cost of scheduling between code
>> inside and outside interrupt context likely to affect performance?

---- RATIONALE ----

>> C5: Briefly critique your design, pointing out advantages and
>> disadvantages in your design choices.  If you were to have extra
>> time to work on this part of the project, how might you choose to
>> refine or improve your design?

